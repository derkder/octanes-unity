https://zhuanlan.zhihu.com/p/165658071

先给所有敌人做一个fsm父类，这个父类里有enum所有敌人都有的那几种状态
然后每种敌人就可以继承这个父类，实现乱七八糟的



更系统的：https://zhuanlan.zhihu.com/p/22976065
实现步骤：
一、状态基类和委托
步骤一、为状态定义一个接口
class HeroineState
{
public:
	virtual ~HeroineState( ) {}
	virtual void handleInput(Heroine& heroine, Input input) {}
	virtual void update(Heroine& heroine) {}
};
步骤二、为每个状态定义一个类
步骤三、恰当地进行状态委托


二、（在饥荒里看到的）状态机管理类
装有啥状态




















https://blog.csdn.net/qq_38186269/article/details/81557030
有限状态机最核心的两个脚本是FSMState和FSMSystem，其中FSMState是状态基类，FSMSystem是状态机的管理类，这两个脚本可以在Wiki.unity3d.com里搜索State找到，一个17k的文件。
在FSMState类中，有两个枚举，第一个枚举Transition存放所有状态转换的条件，第二个人枚举StateID存放的是所有的状态，当我们增加和删除状态的时候直接在这两个枚举中添加和删除就可以了。
FSMState中有一个键值对map，这个键值对存放的是状态的转换条件和目标状态，是用于在后面我们转换状态的时候进行使用，判断是否存在这样的转换条件和状态。FSMState类中有七个函数，
第一个AddTransition是进行状态转换的添加，第二个DeleteTransition是进行状态转换的删除，第三个GetOutputState是获取转换条件相应的状态，第四个DoBeforeEntering是当前状态开始时的操作，
第五个DoBeforeLeaving是当前状态离开时的操作，第六个Act是当前状态执行时的操作，最后一个Reason就是转换状态的操作了。在这些的基础上我添加了一个构造函数，这个构造函数有两个作用，
一是方便我们后续对状态的标记，二是能快速的获取到FSMSystem的对象，方便操作。

FSMSystem类中的函数有三个，第一个AddState是注册我们的状态，第二个DeleteState是删除状态，第三个PerformTransition就是通过转换条件进行状态之间的切换了，同样，在这个的基础上，
我添加了一个函数Update，这个函数的作用是把状态的Act函数和Reason函数进行执行，因为每一个状态都要一直执行这两个函数，所以直接封装起来，方便使用。
